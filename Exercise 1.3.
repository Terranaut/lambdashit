;;Now it's getting interesting.
Exercise 1.3. Define a procedure that takes three numbers as arguments and returns the sum of the
squares of the two larger numbers. 

;(define (square x)
;    (* x x))

;;I gotta figure out how to save these procedures sooner or later.
;;Defining square doesn't take long but I feel like this is gonna get tedious the more procedures I make and use in later exercises.

;;Given the way the problem is presented, it seemed easiest to me to just remove the smallest number rather than collect the two big ones.

;(define (largersquare x y z)
;    (cond
;      ((not (or (> x y) (> x z))) (+ (square y) (square z)))
;      ((not (or (> y x) (> y z))) (+ (square x) (square z)))
;      ((not (or (> z y) (> z x))) (+ (square y) (square x)))))
