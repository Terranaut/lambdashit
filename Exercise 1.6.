Exercise 1.6. Alyssa P. Hacker doesn’t see why if needs to be provided as a special form. ‘‘Why
can’t I just define it as an ordinary procedure in terms of cond?’’ she asks. Alyssa’s friend Eva Lu
Ator claims this can indeed be done, and she defines a new version of if:
(define (new-if predicate then-clause else-clause)
 (cond (predicate then-clause)
 (else else-clause)))
Eva demonstrates the program for Alyssa:
(new-if (= 2 3) 0 5)
5
(new-if (= 1 1) 0 5)
0
Delighted, Alyssa uses new-if to rewrite the square-root program:
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
    guess
    (sqrt-iter (improve guess x)
                x)))
What happens when Alyssa attempts to use this to compute square roots? Explain. 

;Since new-if is based on the 'cond' procedure, an infinite loop will occur. The interpreter will infinitely check its conditions and
;find none of them to be 'true', leaving the value undefined and the program stuck in a loop.
;The true if-procedure will simply check the first condition, and if it is not true (or more simply, 'false'), will just begin to
;work with the 'else' option instead of getting stuck looking for a 'true' condition.


;;Wait, shit, this doesn't seem right at all.
;;FUCK.
